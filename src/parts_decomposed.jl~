# field selected field_items

field_count(ntt::Type{NamedTuple{N,T}}) where {N,T} = nfields(N)
field_count(nt::NamedTuple{N,T}) where {N,T} = nfields(N)

field_names(ntt::Type{NamedTuple{N,T}}) where {N,T} = ntt.parameters[1]
field_names(nt::NamedTuple{N,T}) where {N,T} = N

field_types(ntt::Type{NamedTuple{N,T}}) where {N,T} = ntt.parameters[2]
field_types(nt::NamedTuple{N,T}) where {N,T} = T

field_values(nt::NamedTuple{N,T}) where {N,T} = values(nt)

# (field, index) selected field_item

field_name(ntt::Type{NamedTuple{N,T}}, idx::Integer) where {N,T} = getfield(N, idx)
field_name(nt::NamedTuple{N,T}, idx::Integer) where {N,T} = getfield(N, idx)

field_type(ntt::Type{NamedTuple{N,T}}, idx::Integer) where {N,T} = (T.parameters)[idx]
field_type(nt::NamedTuple{N,T}, idx::Integer) where {N,T} = (T.parameters)[idx]

field_value(nt::NamedTuple{N,T}, idx::Integer) where {N,T} = getfield(nt, idx)

# multifield indexed selection

function field_name_type(ntt::Type{NamedTuple{N,T}}, idx::Integer) where {N,T}
    field_name(ntt, idx), field_type(ntt, idx)
end
function field_name_type(nt::NamedTuple{N,T}, idx::Integer) where {N,T}
    field_name(nt, idx), field_type(nt, idx)
end
function field_name_type_value(nt::NamedTuple{N,T}, idx::Integer) where {N,T}
    field_name(nt, idx),
    field_type(nt, idx),
    field_value(nt, idx)
end

